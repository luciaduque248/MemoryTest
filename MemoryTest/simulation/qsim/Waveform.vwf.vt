// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2024 15:43:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MemoryTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MemoryTest_vlg_sample_tst(
	address,
	clock,
	data_in,
	reset,
	write_memory,
	sampler_tx
);
input [7:0] address;
input  clock;
input [7:0] data_in;
input  reset;
input  write_memory;
output sampler_tx;

reg sample;
time current_time;
always @(address or clock or data_in or reset or write_memory)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MemoryTest_vlg_check_tst (
	display7segu0,
	display7segu1,
	display7segu2,
	display7segu3,
	port_out_00,
	port_out_01,
	sampler_rx
);
input [6:0] display7segu0;
input [6:0] display7segu1;
input [6:0] display7segu2;
input [6:0] display7segu3;
input [7:0] port_out_00;
input [7:0] port_out_01;
input sampler_rx;

reg [6:0] display7segu0_expected;
reg [6:0] display7segu1_expected;
reg [6:0] display7segu2_expected;
reg [6:0] display7segu3_expected;
reg [7:0] port_out_00_expected;
reg [7:0] port_out_01_expected;

reg [6:0] display7segu0_prev;
reg [6:0] display7segu1_prev;
reg [6:0] display7segu2_prev;
reg [6:0] display7segu3_prev;
reg [7:0] port_out_00_prev;
reg [7:0] port_out_01_prev;

reg [6:0] display7segu0_expected_prev;
reg [6:0] display7segu1_expected_prev;
reg [6:0] display7segu2_expected_prev;
reg [6:0] display7segu3_expected_prev;
reg [7:0] port_out_00_expected_prev;
reg [7:0] port_out_01_expected_prev;

reg [6:0] last_display7segu0_exp;
reg [6:0] last_display7segu1_exp;
reg [6:0] last_display7segu2_exp;
reg [6:0] last_display7segu3_exp;
reg [7:0] last_port_out_00_exp;
reg [7:0] last_port_out_01_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	display7segu0_prev = display7segu0;
	display7segu1_prev = display7segu1;
	display7segu2_prev = display7segu2;
	display7segu3_prev = display7segu3;
	port_out_00_prev = port_out_00;
	port_out_01_prev = port_out_01;
end

// update expected /o prevs

always @(trigger)
begin
	display7segu0_expected_prev = display7segu0_expected;
	display7segu1_expected_prev = display7segu1_expected;
	display7segu2_expected_prev = display7segu2_expected;
	display7segu3_expected_prev = display7segu3_expected;
	port_out_00_expected_prev = port_out_00_expected;
	port_out_01_expected_prev = port_out_01_expected;
end


// expected display7segu0[ 6 ]
initial
begin
	display7segu0_expected[6] = 1'bX;
end 
// expected display7segu0[ 5 ]
initial
begin
	display7segu0_expected[5] = 1'bX;
end 
// expected display7segu0[ 4 ]
initial
begin
	display7segu0_expected[4] = 1'bX;
end 
// expected display7segu0[ 3 ]
initial
begin
	display7segu0_expected[3] = 1'bX;
end 
// expected display7segu0[ 2 ]
initial
begin
	display7segu0_expected[2] = 1'bX;
end 
// expected display7segu0[ 1 ]
initial
begin
	display7segu0_expected[1] = 1'bX;
end 
// expected display7segu0[ 0 ]
initial
begin
	display7segu0_expected[0] = 1'bX;
end 
// expected display7segu1[ 6 ]
initial
begin
	display7segu1_expected[6] = 1'bX;
end 
// expected display7segu1[ 5 ]
initial
begin
	display7segu1_expected[5] = 1'bX;
end 
// expected display7segu1[ 4 ]
initial
begin
	display7segu1_expected[4] = 1'bX;
end 
// expected display7segu1[ 3 ]
initial
begin
	display7segu1_expected[3] = 1'bX;
end 
// expected display7segu1[ 2 ]
initial
begin
	display7segu1_expected[2] = 1'bX;
end 
// expected display7segu1[ 1 ]
initial
begin
	display7segu1_expected[1] = 1'bX;
end 
// expected display7segu1[ 0 ]
initial
begin
	display7segu1_expected[0] = 1'bX;
end 
// expected display7segu2[ 6 ]
initial
begin
	display7segu2_expected[6] = 1'bX;
end 
// expected display7segu2[ 5 ]
initial
begin
	display7segu2_expected[5] = 1'bX;
end 
// expected display7segu2[ 4 ]
initial
begin
	display7segu2_expected[4] = 1'bX;
end 
// expected display7segu2[ 3 ]
initial
begin
	display7segu2_expected[3] = 1'bX;
end 
// expected display7segu2[ 2 ]
initial
begin
	display7segu2_expected[2] = 1'bX;
end 
// expected display7segu2[ 1 ]
initial
begin
	display7segu2_expected[1] = 1'bX;
end 
// expected display7segu2[ 0 ]
initial
begin
	display7segu2_expected[0] = 1'bX;
end 
// expected display7segu3[ 6 ]
initial
begin
	display7segu3_expected[6] = 1'bX;
end 
// expected display7segu3[ 5 ]
initial
begin
	display7segu3_expected[5] = 1'bX;
end 
// expected display7segu3[ 4 ]
initial
begin
	display7segu3_expected[4] = 1'bX;
end 
// expected display7segu3[ 3 ]
initial
begin
	display7segu3_expected[3] = 1'bX;
end 
// expected display7segu3[ 2 ]
initial
begin
	display7segu3_expected[2] = 1'bX;
end 
// expected display7segu3[ 1 ]
initial
begin
	display7segu3_expected[1] = 1'bX;
end 
// expected display7segu3[ 0 ]
initial
begin
	display7segu3_expected[0] = 1'bX;
end 
// expected port_out_00[ 7 ]
initial
begin
	port_out_00_expected[7] = 1'bX;
end 
// expected port_out_00[ 6 ]
initial
begin
	port_out_00_expected[6] = 1'bX;
end 
// expected port_out_00[ 5 ]
initial
begin
	port_out_00_expected[5] = 1'bX;
end 
// expected port_out_00[ 4 ]
initial
begin
	port_out_00_expected[4] = 1'bX;
end 
// expected port_out_00[ 3 ]
initial
begin
	port_out_00_expected[3] = 1'bX;
end 
// expected port_out_00[ 2 ]
initial
begin
	port_out_00_expected[2] = 1'bX;
end 
// expected port_out_00[ 1 ]
initial
begin
	port_out_00_expected[1] = 1'bX;
end 
// expected port_out_00[ 0 ]
initial
begin
	port_out_00_expected[0] = 1'bX;
end 
// expected port_out_01[ 7 ]
initial
begin
	port_out_01_expected[7] = 1'bX;
end 
// expected port_out_01[ 6 ]
initial
begin
	port_out_01_expected[6] = 1'bX;
end 
// expected port_out_01[ 5 ]
initial
begin
	port_out_01_expected[5] = 1'bX;
end 
// expected port_out_01[ 4 ]
initial
begin
	port_out_01_expected[4] = 1'bX;
end 
// expected port_out_01[ 3 ]
initial
begin
	port_out_01_expected[3] = 1'bX;
end 
// expected port_out_01[ 2 ]
initial
begin
	port_out_01_expected[2] = 1'bX;
end 
// expected port_out_01[ 1 ]
initial
begin
	port_out_01_expected[1] = 1'bX;
end 
// expected port_out_01[ 0 ]
initial
begin
	port_out_01_expected[0] = 1'bX;
end 
// generate trigger
always @(display7segu0_expected or display7segu0 or display7segu1_expected or display7segu1 or display7segu2_expected or display7segu2 or display7segu3_expected or display7segu3 or port_out_00_expected or port_out_00 or port_out_01_expected or port_out_01)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display7segu0 = %b | expected display7segu1 = %b | expected display7segu2 = %b | expected display7segu3 = %b | expected port_out_00 = %b | expected port_out_01 = %b | ",display7segu0_expected_prev,display7segu1_expected_prev,display7segu2_expected_prev,display7segu3_expected_prev,port_out_00_expected_prev,port_out_01_expected_prev);
	$display("| real display7segu0 = %b | real display7segu1 = %b | real display7segu2 = %b | real display7segu3 = %b | real port_out_00 = %b | real port_out_01 = %b | ",display7segu0_prev,display7segu1_prev,display7segu2_prev,display7segu3_prev,port_out_00_prev,port_out_01_prev);
`endif
	if (
		( display7segu0_expected_prev[0] !== 1'bx ) && ( display7segu0_prev[0] !== display7segu0_expected_prev[0] )
		&& ((display7segu0_expected_prev[0] !== last_display7segu0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[0] = display7segu0_expected_prev[0];
	end
	if (
		( display7segu0_expected_prev[1] !== 1'bx ) && ( display7segu0_prev[1] !== display7segu0_expected_prev[1] )
		&& ((display7segu0_expected_prev[1] !== last_display7segu0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[1] = display7segu0_expected_prev[1];
	end
	if (
		( display7segu0_expected_prev[2] !== 1'bx ) && ( display7segu0_prev[2] !== display7segu0_expected_prev[2] )
		&& ((display7segu0_expected_prev[2] !== last_display7segu0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[2] = display7segu0_expected_prev[2];
	end
	if (
		( display7segu0_expected_prev[3] !== 1'bx ) && ( display7segu0_prev[3] !== display7segu0_expected_prev[3] )
		&& ((display7segu0_expected_prev[3] !== last_display7segu0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[3] = display7segu0_expected_prev[3];
	end
	if (
		( display7segu0_expected_prev[4] !== 1'bx ) && ( display7segu0_prev[4] !== display7segu0_expected_prev[4] )
		&& ((display7segu0_expected_prev[4] !== last_display7segu0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[4] = display7segu0_expected_prev[4];
	end
	if (
		( display7segu0_expected_prev[5] !== 1'bx ) && ( display7segu0_prev[5] !== display7segu0_expected_prev[5] )
		&& ((display7segu0_expected_prev[5] !== last_display7segu0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[5] = display7segu0_expected_prev[5];
	end
	if (
		( display7segu0_expected_prev[6] !== 1'bx ) && ( display7segu0_prev[6] !== display7segu0_expected_prev[6] )
		&& ((display7segu0_expected_prev[6] !== last_display7segu0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu0_expected_prev);
		$display ("     Real value = %b", display7segu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7segu0_exp[6] = display7segu0_expected_prev[6];
	end
	if (
		( display7segu1_expected_prev[0] !== 1'bx ) && ( display7segu1_prev[0] !== display7segu1_expected_prev[0] )
		&& ((display7segu1_expected_prev[0] !== last_display7segu1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[0] = display7segu1_expected_prev[0];
	end
	if (
		( display7segu1_expected_prev[1] !== 1'bx ) && ( display7segu1_prev[1] !== display7segu1_expected_prev[1] )
		&& ((display7segu1_expected_prev[1] !== last_display7segu1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[1] = display7segu1_expected_prev[1];
	end
	if (
		( display7segu1_expected_prev[2] !== 1'bx ) && ( display7segu1_prev[2] !== display7segu1_expected_prev[2] )
		&& ((display7segu1_expected_prev[2] !== last_display7segu1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[2] = display7segu1_expected_prev[2];
	end
	if (
		( display7segu1_expected_prev[3] !== 1'bx ) && ( display7segu1_prev[3] !== display7segu1_expected_prev[3] )
		&& ((display7segu1_expected_prev[3] !== last_display7segu1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[3] = display7segu1_expected_prev[3];
	end
	if (
		( display7segu1_expected_prev[4] !== 1'bx ) && ( display7segu1_prev[4] !== display7segu1_expected_prev[4] )
		&& ((display7segu1_expected_prev[4] !== last_display7segu1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[4] = display7segu1_expected_prev[4];
	end
	if (
		( display7segu1_expected_prev[5] !== 1'bx ) && ( display7segu1_prev[5] !== display7segu1_expected_prev[5] )
		&& ((display7segu1_expected_prev[5] !== last_display7segu1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[5] = display7segu1_expected_prev[5];
	end
	if (
		( display7segu1_expected_prev[6] !== 1'bx ) && ( display7segu1_prev[6] !== display7segu1_expected_prev[6] )
		&& ((display7segu1_expected_prev[6] !== last_display7segu1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu1_expected_prev);
		$display ("     Real value = %b", display7segu1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display7segu1_exp[6] = display7segu1_expected_prev[6];
	end
	if (
		( display7segu2_expected_prev[0] !== 1'bx ) && ( display7segu2_prev[0] !== display7segu2_expected_prev[0] )
		&& ((display7segu2_expected_prev[0] !== last_display7segu2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[0] = display7segu2_expected_prev[0];
	end
	if (
		( display7segu2_expected_prev[1] !== 1'bx ) && ( display7segu2_prev[1] !== display7segu2_expected_prev[1] )
		&& ((display7segu2_expected_prev[1] !== last_display7segu2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[1] = display7segu2_expected_prev[1];
	end
	if (
		( display7segu2_expected_prev[2] !== 1'bx ) && ( display7segu2_prev[2] !== display7segu2_expected_prev[2] )
		&& ((display7segu2_expected_prev[2] !== last_display7segu2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[2] = display7segu2_expected_prev[2];
	end
	if (
		( display7segu2_expected_prev[3] !== 1'bx ) && ( display7segu2_prev[3] !== display7segu2_expected_prev[3] )
		&& ((display7segu2_expected_prev[3] !== last_display7segu2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[3] = display7segu2_expected_prev[3];
	end
	if (
		( display7segu2_expected_prev[4] !== 1'bx ) && ( display7segu2_prev[4] !== display7segu2_expected_prev[4] )
		&& ((display7segu2_expected_prev[4] !== last_display7segu2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[4] = display7segu2_expected_prev[4];
	end
	if (
		( display7segu2_expected_prev[5] !== 1'bx ) && ( display7segu2_prev[5] !== display7segu2_expected_prev[5] )
		&& ((display7segu2_expected_prev[5] !== last_display7segu2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[5] = display7segu2_expected_prev[5];
	end
	if (
		( display7segu2_expected_prev[6] !== 1'bx ) && ( display7segu2_prev[6] !== display7segu2_expected_prev[6] )
		&& ((display7segu2_expected_prev[6] !== last_display7segu2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu2_expected_prev);
		$display ("     Real value = %b", display7segu2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display7segu2_exp[6] = display7segu2_expected_prev[6];
	end
	if (
		( display7segu3_expected_prev[0] !== 1'bx ) && ( display7segu3_prev[0] !== display7segu3_expected_prev[0] )
		&& ((display7segu3_expected_prev[0] !== last_display7segu3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[0] = display7segu3_expected_prev[0];
	end
	if (
		( display7segu3_expected_prev[1] !== 1'bx ) && ( display7segu3_prev[1] !== display7segu3_expected_prev[1] )
		&& ((display7segu3_expected_prev[1] !== last_display7segu3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[1] = display7segu3_expected_prev[1];
	end
	if (
		( display7segu3_expected_prev[2] !== 1'bx ) && ( display7segu3_prev[2] !== display7segu3_expected_prev[2] )
		&& ((display7segu3_expected_prev[2] !== last_display7segu3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[2] = display7segu3_expected_prev[2];
	end
	if (
		( display7segu3_expected_prev[3] !== 1'bx ) && ( display7segu3_prev[3] !== display7segu3_expected_prev[3] )
		&& ((display7segu3_expected_prev[3] !== last_display7segu3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[3] = display7segu3_expected_prev[3];
	end
	if (
		( display7segu3_expected_prev[4] !== 1'bx ) && ( display7segu3_prev[4] !== display7segu3_expected_prev[4] )
		&& ((display7segu3_expected_prev[4] !== last_display7segu3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[4] = display7segu3_expected_prev[4];
	end
	if (
		( display7segu3_expected_prev[5] !== 1'bx ) && ( display7segu3_prev[5] !== display7segu3_expected_prev[5] )
		&& ((display7segu3_expected_prev[5] !== last_display7segu3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[5] = display7segu3_expected_prev[5];
	end
	if (
		( display7segu3_expected_prev[6] !== 1'bx ) && ( display7segu3_prev[6] !== display7segu3_expected_prev[6] )
		&& ((display7segu3_expected_prev[6] !== last_display7segu3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7segu3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7segu3_expected_prev);
		$display ("     Real value = %b", display7segu3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display7segu3_exp[6] = display7segu3_expected_prev[6];
	end
	if (
		( port_out_00_expected_prev[0] !== 1'bx ) && ( port_out_00_prev[0] !== port_out_00_expected_prev[0] )
		&& ((port_out_00_expected_prev[0] !== last_port_out_00_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[0] = port_out_00_expected_prev[0];
	end
	if (
		( port_out_00_expected_prev[1] !== 1'bx ) && ( port_out_00_prev[1] !== port_out_00_expected_prev[1] )
		&& ((port_out_00_expected_prev[1] !== last_port_out_00_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[1] = port_out_00_expected_prev[1];
	end
	if (
		( port_out_00_expected_prev[2] !== 1'bx ) && ( port_out_00_prev[2] !== port_out_00_expected_prev[2] )
		&& ((port_out_00_expected_prev[2] !== last_port_out_00_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[2] = port_out_00_expected_prev[2];
	end
	if (
		( port_out_00_expected_prev[3] !== 1'bx ) && ( port_out_00_prev[3] !== port_out_00_expected_prev[3] )
		&& ((port_out_00_expected_prev[3] !== last_port_out_00_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[3] = port_out_00_expected_prev[3];
	end
	if (
		( port_out_00_expected_prev[4] !== 1'bx ) && ( port_out_00_prev[4] !== port_out_00_expected_prev[4] )
		&& ((port_out_00_expected_prev[4] !== last_port_out_00_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[4] = port_out_00_expected_prev[4];
	end
	if (
		( port_out_00_expected_prev[5] !== 1'bx ) && ( port_out_00_prev[5] !== port_out_00_expected_prev[5] )
		&& ((port_out_00_expected_prev[5] !== last_port_out_00_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[5] = port_out_00_expected_prev[5];
	end
	if (
		( port_out_00_expected_prev[6] !== 1'bx ) && ( port_out_00_prev[6] !== port_out_00_expected_prev[6] )
		&& ((port_out_00_expected_prev[6] !== last_port_out_00_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[6] = port_out_00_expected_prev[6];
	end
	if (
		( port_out_00_expected_prev[7] !== 1'bx ) && ( port_out_00_prev[7] !== port_out_00_expected_prev[7] )
		&& ((port_out_00_expected_prev[7] !== last_port_out_00_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_port_out_00_exp[7] = port_out_00_expected_prev[7];
	end
	if (
		( port_out_01_expected_prev[0] !== 1'bx ) && ( port_out_01_prev[0] !== port_out_01_expected_prev[0] )
		&& ((port_out_01_expected_prev[0] !== last_port_out_01_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[0] = port_out_01_expected_prev[0];
	end
	if (
		( port_out_01_expected_prev[1] !== 1'bx ) && ( port_out_01_prev[1] !== port_out_01_expected_prev[1] )
		&& ((port_out_01_expected_prev[1] !== last_port_out_01_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[1] = port_out_01_expected_prev[1];
	end
	if (
		( port_out_01_expected_prev[2] !== 1'bx ) && ( port_out_01_prev[2] !== port_out_01_expected_prev[2] )
		&& ((port_out_01_expected_prev[2] !== last_port_out_01_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[2] = port_out_01_expected_prev[2];
	end
	if (
		( port_out_01_expected_prev[3] !== 1'bx ) && ( port_out_01_prev[3] !== port_out_01_expected_prev[3] )
		&& ((port_out_01_expected_prev[3] !== last_port_out_01_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[3] = port_out_01_expected_prev[3];
	end
	if (
		( port_out_01_expected_prev[4] !== 1'bx ) && ( port_out_01_prev[4] !== port_out_01_expected_prev[4] )
		&& ((port_out_01_expected_prev[4] !== last_port_out_01_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[4] = port_out_01_expected_prev[4];
	end
	if (
		( port_out_01_expected_prev[5] !== 1'bx ) && ( port_out_01_prev[5] !== port_out_01_expected_prev[5] )
		&& ((port_out_01_expected_prev[5] !== last_port_out_01_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[5] = port_out_01_expected_prev[5];
	end
	if (
		( port_out_01_expected_prev[6] !== 1'bx ) && ( port_out_01_prev[6] !== port_out_01_expected_prev[6] )
		&& ((port_out_01_expected_prev[6] !== last_port_out_01_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[6] = port_out_01_expected_prev[6];
	end
	if (
		( port_out_01_expected_prev[7] !== 1'bx ) && ( port_out_01_prev[7] !== port_out_01_expected_prev[7] )
		&& ((port_out_01_expected_prev[7] !== last_port_out_01_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_port_out_01_exp[7] = port_out_01_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MemoryTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clock;
reg [7:0] data_in;
reg reset;
reg write_memory;
// wires                                               
wire [6:0] display7segu0;
wire [6:0] display7segu1;
wire [6:0] display7segu2;
wire [6:0] display7segu3;
wire [7:0] port_out_00;
wire [7:0] port_out_01;

wire sampler;                             

// assign statements (if any)                          
MemoryTest i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.display7segu0(display7segu0),
	.display7segu1(display7segu1),
	.display7segu2(display7segu2),
	.display7segu3(display7segu3),
	.port_out_00(port_out_00),
	.port_out_01(port_out_01),
	.reset(reset),
	.write_memory(write_memory)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// write_memory
initial
begin
	write_memory = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #640000 1'b1;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #320000 1'b1;
	address[5] = #320000 1'b0;
	address[5] = #320000 1'b1;
end 
// address[ 4 ]
initial
begin
	repeat(3)
	begin
		address[4] = 1'b0;
		address[4] = #160000 1'b1;
		# 160000;
	end
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	repeat(6)
	begin
		address[3] = 1'b0;
		address[3] = #80000 1'b1;
		# 80000;
	end
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	repeat(12)
	begin
		address[2] = 1'b0;
		address[2] = #40000 1'b1;
		# 40000;
	end
	address[2] = 1'b0;
end 
// address[ 1 ]
always
begin
	address[1] = 1'b0;
	address[1] = #20000 1'b1;
	#20000;
end 
// address[ 0 ]
always
begin
	address[0] = 1'b0;
	address[0] = #10000 1'b1;
	#10000;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #640000 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
	data_in[5] = #320000 1'b1;
	data_in[5] = #320000 1'b0;
	data_in[5] = #320000 1'b1;
end 
// data_in[ 4 ]
initial
begin
	repeat(3)
	begin
		data_in[4] = 1'b0;
		data_in[4] = #160000 1'b1;
		# 160000;
	end
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	repeat(6)
	begin
		data_in[3] = 1'b0;
		data_in[3] = #80000 1'b1;
		# 80000;
	end
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	repeat(12)
	begin
		data_in[2] = 1'b0;
		data_in[2] = #40000 1'b1;
		# 40000;
	end
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
always
begin
	data_in[1] = 1'b0;
	data_in[1] = #20000 1'b1;
	#20000;
end 
// data_in[ 0 ]
always
begin
	data_in[0] = 1'b0;
	data_in[0] = #10000 1'b1;
	#10000;
end 

MemoryTest_vlg_sample_tst tb_sample (
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.reset(reset),
	.write_memory(write_memory),
	.sampler_tx(sampler)
);

MemoryTest_vlg_check_tst tb_out(
	.display7segu0(display7segu0),
	.display7segu1(display7segu1),
	.display7segu2(display7segu2),
	.display7segu3(display7segu3),
	.port_out_00(port_out_00),
	.port_out_01(port_out_01),
	.sampler_rx(sampler)
);
endmodule

